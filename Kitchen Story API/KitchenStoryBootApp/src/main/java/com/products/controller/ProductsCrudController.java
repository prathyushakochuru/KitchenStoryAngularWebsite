package com.products.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.products.model.Products;
import com.products.service.ProductsCrudService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


@RestController
@Api(value="KitchenStoryAPI", description="This is a KitchenStory API, you can login using admin credentials - manage & categorize the products, browse list of all users & search by name/contact and view purchase lists by date and category")
@RequestMapping("/kitchenstoryapi")
public class ProductsCrudController {
	
	@Autowired
	private ProductsCrudService prodService;
	
	@ApiOperation("Admin can create a product by passing prodname, price, description of food products- Id will be autogenerated")
	@CrossOrigin(origins = "*")
	@PostMapping(value = "/product")
	public String createProduct(@RequestBody Products prod) {
		
		prodService.createProduct(prod);
		 
		 return "Created product and saved to mysql-Kitchenstory DB - " + prod.toString();
	}
	
	@ApiOperation("Admin can update product name and price of the existing product")
	@CrossOrigin(origins = "*")
	@PutMapping(value = "/product/{id}")
	public String updateProduct(@PathVariable(value = "id") int id,@Validated @RequestBody Products prod) {
		
		prodService.updateProduct(id,prod);
		 
		 return "Updated product for Id - " + id + " and saved to mysql-Sportyshoes DB - " + prod.toString();
	}
	
	@CrossOrigin(origins = "*")
	@DeleteMapping(value = "/product/{id}")
	public String deleteProductById(@PathVariable(value = "id")int id) {
		prodService.deleteProductById(id);
		return "Deleted - product with id " +id;
		
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping(value = "/product/{productname}")
	public List<Products> getProductByName(@PathVariable(value = "productname")String productname)
	{
		return prodService.getProductByName(productname);
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping(value = "/product")
	public List<Products> getAllProducts()
	{
		return prodService.getAllProducts();
	}

}
